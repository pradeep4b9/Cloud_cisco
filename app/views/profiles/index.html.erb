<div class='dashboard-wrapper'>
  <div class='content-header'>
    <h3 class='title'>Image</h3>
  </div>
  <%= image_tag(@profile.product_image, 
    :width => "auto" , :height => "60px", :style => "background-color: black;vertical-align: middle;") %>
  <div class='main-container' style = "padding: 60px;margin: 20px;min-height: 407px;border: 5px solid #e6e6e6;">
    <div id="no-drop" class="draggable drag-drop"> #no-drop </div>

    <div id="yes-drop" class="draggable drag-drop"> #yes-drop </div>

    <div id="outer-dropzone" class="dropzone">
      #outer-dropzone
      <div id="inner-dropzone" class="dropzone">#inner-dropzone</div>
     </div>
    
    <ul class='bundle-list'>
      <div class='clearfix'></div>
    </ul>
    <div class='clearfix'></div>
  </div>
</div>


<!-- <div id="no-drop" class="draggable drag-drop"> #no-drop </div>

<div id="yes-drop" class="draggable drag-drop"> #yes-drop </div>

<div id="outer-dropzone" class="dropzone">
  #outer-dropzone
  <div id="inner-dropzone" class="dropzone">#inner-dropzone</div>
 </div> -->





<script type="text/javascript">
  /* The dragging code for '.draggable' from the demo above
   * applies to this demo as well so it doesn't have to be repeated. */

  // enable draggables to be dropped into this
  interact('.dropzone').dropzone({
    // only accept elements matching this CSS selector
    accept: '#yes-drop',

    // Require a 75% element overlap for a drop to be possible
    overlap: 0.75,

    // listen for drop related events:

    ondropactivate: function (event) {
      alert('hi');
      // add active dropzone feedback
      event.target.classList.add('drop-active');
    },
    ondragenter: function (event) {
      var draggableElement = event.relatedTarget,
          dropzoneElement = event.target;

      // feedback the possibility of a drop
      dropzoneElement.classList.add('drop-target');
      draggableElement.classList.add('can-drop');
      draggableElement.textContent = 'Dragged in';
    },
    ondragleave: function (event) {
      // remove the drop feedback style
      event.target.classList.remove('drop-target');
      event.relatedTarget.classList.remove('can-drop');
      event.relatedTarget.textContent = 'Dragged out';
    },
    ondrop: function (event) {
      event.relatedTarget.textContent = 'Dropped';
    },
    ondropdeactivate: function (event) {
      // remove active dropzone feedback
      event.target.classList.remove('drop-active');
      event.target.classList.remove('drop-target');
    }
  });
</script>
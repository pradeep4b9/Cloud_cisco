<style>

body {
    padding:20px;
}
#container {
    border:solid 1px #ccc;
    margin-top: 10px;
    width:650px;
    height:550px;
}
#housebar {
    width:350px;
    height:350px;
    border:solid 1px blue;
}

div.small {
  width: 400px;
  height: 400px;
  background-image: url(https://s-media-cache-ak0.pinimg.com/736x/e1/98/d2/e198d2ba175affaf853e2ea2292cb95e.jpg);
  background-size: cover;
  background-color: lightblue;*/
}

#results {
    margin-top: 12px;
    width: 478px;
    height: 50px;
    border: 1px solid white;
    color: white;
    text-align: center;
    font-family: "Times New Roman", Times, serif;
    font-size: 23px;
    left: 235px;
}

</style>
<div class='dashboard-wrapper'>
  
  <h4>Captiveportal Module</h4>

  <img id="house" width=26 height=26 src="https://dl.dropboxusercontent.com/u/139992952/stackoverflow/house32x32transparent.png">
  <img class="" width=28 height=28 src="">
  <img class="" width=28 height=28 src="">
  <img class="" width=28 height=28 src="">
  <div id="container" class="small">
    
  </div>
  <br>
  <!-- <canvas id="canvas" width="400" height="200"></canvas> -->
  
  
</div>
  <div id="results"></div>
  


<script>

var $house = $("#house");
$house.hide();

// get the offset position of the kinetic container
var $stageContainer = $("#container");
var stageOffset = $stageContainer.offset();
var offsetX = stageOffset.left;
var offsetY = stageOffset.top;




// create the Kinetic.Stage and layer
var stage = new Kinetic.Stage({
    container: 'container',
    width: 650,
    height: 550
});
var layer = new Kinetic.Layer();
stage.add(layer);

// start loading the image used in the draggable housebar element
// this image will be used in a new Kinetic.Image
var image1 = new Image();
image1.onload = function () {
    $house.show();
}
image1.src = "https://dl.dropboxusercontent.com/u/139992952/stackoverflow/house32x32transparent.png";

// make the housebar image draggable
$(function() {
$house.draggable({
    helper: 'clone',
});
});

// set the data payload
$house.data("url", "house.png"); // key-value pair
$house.data("width", "32"); // key-value pair
$house.data("height", "33"); // key-value pair
$house.data("image", image1); // key-value pair

// make the Kinetic Container a dropzone
$(function() {
$stageContainer.droppable({
    drop: dragDrop,
});
});

// handle a drop into the Kinetic container
function dragDrop(e, ui) {
    alert("first");
    // get the drop point
    var x = parseInt(ui.offset.left - offsetX) - 1;
    var y = parseInt(ui.offset.top - offsetY);
    // var x = parseInt(ui[0] - offsetX) - 1;
    // var y = parseInt(ui[1] - offsetY);    
    // get the drop payload (here the payload is the image)
    var element = $house;//ui.draggable;
    var data = element.data("url");
    var theImage = element.data("image");
     // create a new Kinetic.Image at the drop point
    // be sure to adjust for any border width (here border==1)
    var image = new Kinetic.Image({
        name: data,
        x: x,
        y: y,
        image: theImage,
        draggable: true
    });
    layer.add(image);
    layer.draw();

     var coords = "X co-ords: " + x + ", Y co-ords: " + y;
    document.getElementById("results").innerHTML = coords;

    $pos = $("#results");

    image.on("dragmove", function () {
    var gPos = image.getPosition();
    var x = parseInt(offsetX + gPos.x);
    var y = parseInt(offsetY + gPos.y);
    $pos.text("photoImage: screenX=" + x + ", screenY=" + y);
});

    // $(function() {

    // var position = stage.getUserPosition();
    // document.getElementById("results").innerHTML = position;
    // });
    
}



function dragDropwithcords(e, ui) {

  alert("second");

    // get the drop point
    // var x = parseInt(ui.offset.left - offsetX);
    // var y = parseInt(ui.offset.top - offsetY);

    var x = parseInt(ui[0] - offsetX);
    var y = parseInt(ui[1] - offsetY);

    // get the drop payload (here the payload is the image)
    var element = $house;
    var data = element.data("url");
    var theImage = element.data("image");

    // create a new Kinetic.Image at the drop point
    // be sure to adjust for any border width (here border==1)
    var image = new Kinetic.Image({
        name: data,
        x: x,
        y: y,
        image: theImage,
        draggable: true
    });
    layer.add(image);
    layer.draw();
}

var d = document.getElementById('results');
var x_pos = 0;
var y_pos = 0;

d.style.position = "absolute";
d.style.left = x_pos+'px';
d.style.top = y_pos+'px';

var pgimage=new Image();
pgimage.src = "https://s-media-cache-ak0.pinimg.com/736x/e1/98/d2/e198d2ba175affaf853e2ea2292cb95e.jpg";

pgimage.onload = function(){
//ctx.drawImage(pgimage,0,0);
  //var ar = [[170, 480]];//, [97, 297], [119, 205], [169, 421], [215, 67], [216, 196], [224, 99], [254, 230], [255, 102], [312, 143]];
  var ar = [[399, 296],[496,295],[555,343],[623,355]];
  for (i = 0; i < ar.length; i++) {
    // var image1=new Image();
    // image1.src = "https://dl.dropboxusercontent.com/u/139992952/stackoverflow/house32x32transparent.png";
    dragDropwithcords("",ar[i]);
    //ctx.drawImage(image1,ar[i][0],ar[i][1]);
    // var coords = "X co-ords: " + x + ", Y co-ords: " + y;
    // document.getElementById("results").innerHTML = coords;
  }
  document.getElementById("results").innerHTML = ar;


  
}

//you're passing parameters that don't exist in _mousemove
// function getMousePosition(e){
//     var mouseX = e.clientX;
//     var mouseY = e.clientY;
//     console.log("mouseX = " + mouseX);
//     console.log("mouseY = " + mouseY);
// }



// mousemove: function (evt) {
//     this._setUserPosition(evt);
//     var dd = Kinetic.DD;
//     var obj = this.getIntersection(this.getUserPosition());
//     getMousePosition(evt);

//     if(obj) {
//         var shape = obj.shape;
//         if(shape) {
//             if((!dd || !dd.moving) && obj.pixel[3] === 255 && (!this.targetShape || this.targetShape._id !== shape._id)) {
//                 if(this.targetShape) {
//                     this.targetShape._handleEvent('mouseout', evt, shape);
//                     this.targetShape._handleEvent('mouseleave', evt, shape);
//                 }
//                 shape._handleEvent('mouseover', evt, this.targetShape);
//                 shape._handleEvent('mouseenter', evt, this.targetShape);
//                 this.targetShape = shape;
//             }
//             else {
//                 shape._handleEvent('mousemove', evt);
//             }
//         }
//     }
   
//     else if(this.targetShape && (!dd || !dd.moving)) {
//         this.targetShape._handleEvent('mouseout', evt);
//         this.targetShape._handleEvent('mouseleave', evt);
//         this.targetShape = null;
//     }

    
//     if(dd) {
//         dd._startDrag(evt);
//     }
// }


// var containerOffset = $("#container").offset();
// var offsetX = containerOffset.left;
// var offsetY = containerOffset.top;

// //
// var stage = new Kinetic.Stage({
//     container: 'container',
//     width: 350,
//     height: 350
// });

// //
// photoLayer = new Kinetic.Layer({
//     drawBorder: true
// });
// stage.add(photoLayer);

// //
// photoGroup = new Kinetic.Group({
//     x: 0,
//     y: 0,
//     draggable: true,
//     id: "photoGroup"
// });
// photoGroup.on("dragmove", function () {
//     var gPos = photoGroup.getPosition();
//     var x = parseInt(offsetX + gPos.x);
//     var y = parseInt(offsetY + gPos.y);
//     $pos.text("photoImage: screenX=" + x + ", screenY=" + y);
// });
// photoLayer.add(photoGroup);

// //
// var photoObj = new Image();
// photoObj.onload = function () {
//     var photoImage = new Kinetic.Image({
//         x: 0,
//         y: 0,
//         image: photoObj,
//         width: photoObj.width,
//         height: photoObj.height,
//         name: "photo",
//         id: "photo"
//     });
//     photoGroup.add(photoImage);
//     photoLayer.draw();
// }
// photoObj.src = "https://dl.dropboxusercontent.com/u/139992952/stackoverflow/house32x32transparent.png";

</script>